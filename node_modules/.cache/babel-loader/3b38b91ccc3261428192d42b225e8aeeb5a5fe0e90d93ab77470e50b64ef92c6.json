{"ast":null,"code":"import{useState}from\"react\";import{useAuthContext}from\"./useAuthContext\";import{useNavigate}from\"react-router-dom\";export const useLogin=()=>{const[error,setError]=useState(null);const[isLoading,setIsLoading]=useState(null);const[loginSuccess,setLoginSuccess]=useState(false);const navigate=useNavigate();const{dispatch}=useAuthContext();const login=async(username,password)=>{const response=await fetch(\"/api/users/login\",{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({username,password})});const json=await response.json();if(!response.ok){setIsLoading(false);setLoginSuccess(false);setError(json.error);}else{//save the user to local storage\nlocalStorage.setItem('user',JSON.stringify(json));//update auth context\ndispatch({type:'LOGIN',payload:json});setLoginSuccess(true);setError(false);setIsLoading(false);setTimeout(()=>{navigate('/');},\"1000\");}};return{login,isLoading,error,loginSuccess};};","map":{"version":3,"names":["useState","useAuthContext","useNavigate","useLogin","error","setError","isLoading","setIsLoading","loginSuccess","setLoginSuccess","navigate","dispatch","login","username","password","response","fetch","method","headers","body","JSON","stringify","json","ok","localStorage","setItem","type","payload","setTimeout"],"sources":["/Users/alexnham/Desktop/cs/mern/ProjManage/frontend/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useAuthContext } from \"./useAuthContext\";\nimport { useNavigate } from \"react-router-dom\";\n\n\nexport const useLogin = () => {\n    const [error,setError] = useState(null)\n    const [isLoading, setIsLoading] = useState(null)\n    const [loginSuccess, setLoginSuccess] = useState(false)\n    const navigate = useNavigate()\n\n    const { dispatch } = useAuthContext()\n\n\n    const login = async (username, password) => {\n   \n\n        const response = await fetch(`/api/users/login`, {\n            method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify({username,password})\n        })\n        const json = await response.json()\n\n        if(!response.ok) {\n            setIsLoading(false)\n            setLoginSuccess(false)\n            setError(json.error)\n        } else {\n            //save the user to local storage\n            localStorage.setItem('user',JSON.stringify(json))\n\n            //update auth context\n            dispatch({type: 'LOGIN', payload: json})\n            setLoginSuccess(true)\n            setError(false)\n            setIsLoading(false)\n            setTimeout( () => \n                {navigate('/')\n                },\n                \"1000\")\n        }\n    }\nreturn {login, isLoading, error, loginSuccess}\n\n}"],"mappings":"AAAA,OAASA,QAAQ,KAAQ,OAAO,CAChC,OAASC,cAAc,KAAQ,kBAAkB,CACjD,OAASC,WAAW,KAAQ,kBAAkB,CAG9C,MAAO,MAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CAC1B,KAAM,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAGL,QAAQ,CAAC,IAAI,CAAC,CACvC,KAAM,CAACM,SAAS,CAAEC,YAAY,CAAC,CAAGP,QAAQ,CAAC,IAAI,CAAC,CAChD,KAAM,CAACQ,YAAY,CAAEC,eAAe,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CACvD,KAAM,CAAAU,QAAQ,CAAGR,WAAW,CAAC,CAAC,CAE9B,KAAM,CAAES,QAAS,CAAC,CAAGV,cAAc,CAAC,CAAC,CAGrC,KAAM,CAAAW,KAAK,CAAG,KAAAA,CAAOC,QAAQ,CAAEC,QAAQ,GAAK,CAGxC,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,oBAAqB,CAC7CC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAC,cAAc,CAAE,kBAAkB,CAAC,CAC7CC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACR,QAAQ,CAACC,QAAQ,CAAC,CAC5C,CAAC,CAAC,CACF,KAAM,CAAAQ,IAAI,CAAG,KAAM,CAAAP,QAAQ,CAACO,IAAI,CAAC,CAAC,CAElC,GAAG,CAACP,QAAQ,CAACQ,EAAE,CAAE,CACbhB,YAAY,CAAC,KAAK,CAAC,CACnBE,eAAe,CAAC,KAAK,CAAC,CACtBJ,QAAQ,CAACiB,IAAI,CAAClB,KAAK,CAAC,CACxB,CAAC,IAAM,CACH;AACAoB,YAAY,CAACC,OAAO,CAAC,MAAM,CAACL,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC,CAEjD;AACAX,QAAQ,CAAC,CAACe,IAAI,CAAE,OAAO,CAAEC,OAAO,CAAEL,IAAI,CAAC,CAAC,CACxCb,eAAe,CAAC,IAAI,CAAC,CACrBJ,QAAQ,CAAC,KAAK,CAAC,CACfE,YAAY,CAAC,KAAK,CAAC,CACnBqB,UAAU,CAAE,IACR,CAAClB,QAAQ,CAAC,GAAG,CAAC,CACd,CAAC,CACD,MAAM,CAAC,CACf,CACJ,CAAC,CACL,MAAO,CAACE,KAAK,CAAEN,SAAS,CAAEF,KAAK,CAAEI,YAAY,CAAC,CAE9C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}